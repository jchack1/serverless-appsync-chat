service: appsync-chat

frameworkVersion: "3"

plugins:
  - serverless-appsync-plugin

provider:
  name: aws
  runtime: nodejs18.x

iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:BatchGetItem
      - dynamodb:GetItem
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:BatchWriteItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
    Resource: arn:aws:dynamodb:${aws:region}:*:*"
  - Effect: Allow
    Action:
      - logs:CreateLogStream
      - logs:PutLogEvents
    Resource: arn:aws:logs:eu-west-1:123456789012:*
  - Effect: Allow
    Action: logs:CreateLogGroup
    Resource: "*"

functions:
  autoConfirm:
    handler: functions/auto-confirm.handler
  postSignUp:
    handler: functions/post-signup.handler
    role: CustomLambdaDynamoRole

appSync:
  name: appsync-chat-api
  authentication:
    type: "AMAZON_COGNITO_USER_POOLS"
    config:
      userPoolId: {Ref: CognitoUserPool}
      awsRegion: ${aws:region}
      defaultAction: ALLOW
  schema: "schema.graphql"

  resolvers:
    Query.getAllChatMessages:
      dataSource: chatMessagesDataSource
      kind: UNIT
      code: messages/getAllChatMessages.ts

  dataSources:
    chatMessagesDataSource:
      type: AMAZON_DYNAMODB
      config:
        tableName: {Ref: chatMessagesTable}
        serviceRoleArn: {Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn]}
        iamRoleStatements:
          - Effect: "Allow"
            Action:
              - "dynamodb:*"
            Resource: "arn:aws:dynamodb:${aws:region}:*:*"

    chatMembersDataSource:
      type: AMAZON_DYNAMODB
      config:
        tableName: {Ref: chatMembersTable}
        serviceRoleArn: {Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn]}
        iamRoleStatements:
          - Effect: "Allow"
            Action:
              - "dynamodb:*"
            Resource: "arn:aws:dynamodb:${aws:region}:*:*"

resources:
  Resources:
    #appsync service role - dynamo db and lambda
    AppSyncDynamoDBServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "DynamoDB-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "DynamoDB-AppSyncServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:*"
                  Resource: "arn:aws:dynamodb:${aws:region}:*:*"
    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Lambda-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"

    # Cognito - User pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: cognito-appsync-chat_user_pool
        UsernameAttributes:
          - email
        Schema:
          - Name: "username"
            Mutable: true
            AttributeDataType: String
        LambdaConfig:
          PreSignUp: !Sub "arn:aws:lambda:${aws:region}:${aws:accountId}:function:appsync-chat-dev-autoConfirm"
          PostConfirmation: !Sub "arn:aws:lambda:${aws:region}:${aws:accountId}:function:appsync-chat-dev-postSignUp"

    # Cognito - Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: cognito-appsync-chat_client
        UserPoolId:
          Ref: CognitoUserPool
    # Cognito - Identity
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: cognito-appsync-chat_identity_pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]
    # Cognito roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnauthRole, Arn]
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: cognito-appsync-chat_appAuthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"
    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: cognito-appsync-chat_appUnauthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"

    PreSignUpInvocationPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Sub "arn:aws:lambda:${aws:region}:${aws:accountId}:function:appsync-chat-dev-autoConfirm"
        Principal: cognito-idp.amazonaws.com
        SourceArn: {Fn::GetAtt: [CognitoUserPool, Arn]}

    PostConfirmationInvocationLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Sub "arn:aws:lambda:${aws:region}:${aws:accountId}:function:appsync-chat-dev-postSignUp"
        Principal: cognito-idp.amazonaws.com
        SourceArn: {Fn::GetAtt: [CognitoUserPool, Arn]}

    CustomLambdaDynamoRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: CustomLambdaDynamoRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: MyLambdaPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                    - logs:TagResource
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
          - PolicyName: MyDynamoDBPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:*"
                  Resource: "arn:aws:dynamodb:${aws:region}:*:*"

    chatMessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-messages
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: N
          - AttributeName: GSI1
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1
                KeyType: HASH
              - AttributeName: SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    chatMembersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-members
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1
                KeyType: HASH
              - AttributeName: SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    appMembersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-app-members
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: N
          - AttributeName: GSI1
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1
                KeyType: HASH
              - AttributeName: SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
